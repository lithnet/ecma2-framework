using System;
using System.Collections.Generic;
using Lithnet.Ecma2Framework.Internal;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace Lithnet.Ecma2Framework.Generated
{
    internal class Ecma2ConfigRegistrationProvider : IConfigRegistrationProvider
    {
        private readonly static Dictionary<string, string> mappings = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
%MAPPEDPROPERTIES%
        };

        public void RegisterOptions(IServiceCollection services, IConfiguration configuration)
        {
%SERVICEREGISTRATIONS%
        }

        public string GetKeyFromParameterName(string name)
        {
            if (mappings.ContainsKey(name))
            {
                return mappings[name];
            }

            char[] arr = name.ToCharArray();
            arr = Array.FindAll<char>(arr, (c => (char.IsLetter(c))));
            return new string(arr);
        }
    }
}
