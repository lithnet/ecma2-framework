using System.Collections.Generic;
using System.Collections.ObjectModel;
using Microsoft.MetadirectoryServices;

namespace Lithnet.Ecma2Framework.Generated
{
    public class Ecma2Implementation :
        IMAExtensible2GetSchema,
        IMAExtensible2GetCapabilitiesEx,
        IMAExtensible2GetParametersEx,
        IMAExtensible2GetParameters
    {
        private Ecma2 provider;

        public Ecma2Implementation()
        {
            var initializer = Ecma2Bootstrapper.GetInitializer();
            this.provider = new Ecma2(initializer);
        }


        MACapabilities IMAExtensible2GetCapabilitiesEx.GetCapabilitiesEx(KeyedCollection<string, ConfigParameter> configParameters)
        {
            return AsyncHelper.RunSync(this.provider.GetCapabilitiesAsync(configParameters));
        }

        IList<ConfigParameterDefinition> IMAExtensible2GetParametersEx.GetConfigParametersEx(KeyedCollection<string, ConfigParameter> configParameters, ConfigParameterPage page, int pageNumber)
        {
            return AsyncHelper.RunSync(this.provider.GetConfigParametersAsync(configParameters, page, pageNumber));
        }

        ParameterValidationResult IMAExtensible2GetParametersEx.ValidateConfigParametersEx(KeyedCollection<string, ConfigParameter> configParameters, ConfigParameterPage page, int pageNumber)
        {
            return AsyncHelper.RunSync(this.provider.ValidateConfigParametersAsync(configParameters, page, pageNumber));
        }

        Schema IMAExtensible2GetSchema.GetSchema(KeyedCollection<string, ConfigParameter> configParameters)
        {
            return AsyncHelper.RunSync(this.provider.GetSchemaAsync(configParameters));
        }

        IList<ConfigParameterDefinition> IMAExtensible2GetParameters.GetConfigParameters(KeyedCollection<string, ConfigParameter> configParameters, ConfigParameterPage page)
        {
            return AsyncHelper.RunSync(this.provider.GetConfigParametersAsync(configParameters, page, 1));
        }

        ParameterValidationResult IMAExtensible2GetParameters.ValidateConfigParameters(KeyedCollection<string, ConfigParameter> configParameters, ConfigParameterPage page)
        {
            return AsyncHelper.RunSync(this.provider.ValidateConfigParametersAsync(configParameters, page, 1));
        }
    }
}